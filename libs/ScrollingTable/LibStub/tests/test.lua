local v0={};local v1=string.char;local v2=string.byte;local v3=string.sub;local v4=bit32 or bit ;local v5=v4.bxor;local v6=table.concat;local v7=table.insert;local function v8(v19,v20) local v21={};for v23=1, #v19 do v7(v21,v1(v5(v2(v3(v19,v23,v23 + 1 )),v2(v3(v20,1 + (v23% #v20) ,1 + (v23% #v20) + 1 )))%256 ));end return v6(v21);end debugstack=debug.traceback;strmatch=string.match;loadfile(v8("\159\141\148\9\239\185\244\10\196\193\149\41\243\186","\126\177\163\187\69\134\219\167"))();local v11,v12=LibStub:NewLibrary(v8("\19\204\36\209\239","\156\67\173\74\165"),491 -(59 + 431) );assert(v11);assert( not v12);v11.MyMethod=function(v22) end;local v14=v11.MyMethod;v11.MyTable={};local v16=v11.MyTable;local v17,v18=LibStub:NewLibrary(v8("\4\182\71\2\175","\38\84\215\41\118\220\70"),728 -(433 + 294) );assert( not v17);local v17,v18=LibStub:NewLibrary(v8("\96\23\44\6\237","\158\48\118\66\114"),1846 -(1228 + 618) );assert( not v17);local v17,v18=LibStub:NewLibrary(v8("\155\37\30\34\96","\155\203\68\112\86\19\197"),3 -1 );assert(v17);assert(rawequal(v17,v11));assert(v18==(3 -2) );assert(rawequal(v11.MyMethod,v14));assert(rawequal(v11.MyTable,v16));local v17,v18=LibStub:NewLibrary(v8("\118\220\56\232\83","\152\38\189\86\156\32\24\133"),v8("\222\91\166\78\188\4\231\100\240\86\175","\38\156\55\199"));assert(v17);assert(v18==(954 -(802 + 150)) );local v17,v18=LibStub:NewLibrary(v8("\152\124\114\60\0","\35\200\29\28\72\115\20\154"),v8("\59\179\208\215\205\120\116\24\177\213\159\157\32\49\24\172\212\159\132\43\58\22\173\212\159\220\121\116\59\179\208\215","\84\121\223\177\191\237\76"));assert(v17);assert(v18==(7 -4) );local v17,v18=LibStub:NewLibrary(v8("\139\87\199\180\41","\161\219\54\169\192\90\48\80"),9 -4 );assert(v17);assert(v18==(3 + 1) );